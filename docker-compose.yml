version: "3"
services:
    # 각각 컨테이너 서비스들을 위한 틀을 만든다. 각각의 이름을 정의

    frontend:
        build:
            
            # 개발환경을 위한 dockerfile의 위치 지정
            dockerfile: Dockerfile.dev
            context: ./frontend

        volumes: # 코드 수정 후 이미지를 다시 build하지 않도록 Volume 설정
            - /app/node_modules # 참조제외 설정
            - ./frontend:/app # 참조 설정
        stdin_open: true # 리액트 앱 종료시 발생하는 버그를 잡기 위한 옵션
    nginx:
        restart: always
        # 재시작정책. 서버 실행시 에러가 났을 때의 정책
        # no 어떤 상황에서도 재시작하지 않음/always 항상 재시작/on-failure 에러코드와 함께 컨테이너가 멈췄을 때 재시작/unless-stopped 개발자가 임의로 멈추려고 할 때 빼곤 항상 재시작
        build:
            dockerfile: Dockerfile
            context: ./nginx
        ports:
            - "3000:80"
            # 로컬 포트:컨테이너 포트

    backend:
        build:
            dockerfile: Dockerfile.dev
            context: ./backend
        container_name: app_backend # 생략 가능. 컨테이너 이름 지정
        volumes: 
            - /app/node_modules
            - ./backend:/app
        environment: # AWS RDB에서 생성하는 mysql을 활용하기 위한 환경변수값
            MYSQL_HOST: mysql
            MYSQL_USER: user
            MYSQL_ROOT_PASSWORD: test7777
            MYSQL_DATABASE: myapp
            MYSQL_PORT: 3306


    # AWS에서 돌아가는 mysql로 도커 이미지에 연결해주기 위해 모두 삭제하고 db.js 파일의 pool 내용은 AWS에서 생성하여 연결
    # mysql:
    #     build: ./mysql
    #     restart: unless-stopped
    #     container_name: app_mysql
    #     ports:
    #         - "3306:3306"
    #     volumes: # 도커 이미지가 컨테이너를 생성하고, 컨테이너 안에 데이터가 저장되기 때문에 컨테이너를 지우면 같이 삭제된다. 영속성이 필요한 경우 volume을 설정하여 컨테이너를 삭제해도 db 데이터는 남도록 하는 volume 설정
    #         - ./mysql/mysql_data:/var/lib/mysql # 콜론의 뒤에 있는 컨테이너가 콜론 앞에 있는 로컬(호스트의 파일)을 참조하도록 하는 설정
    #         - ./mysql/sqls/:/docker-entrypoint-initdb.d/
    #     environment: # 환경변수 지정
    #         MYSQL_ROOT_PASSWORD: test
    #         MYSQL_DATABASE: myapp